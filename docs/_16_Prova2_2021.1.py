'''
POO 2021.1 - Prova 2
Um sistema envolvendo diferentes tipos de pol√≠gonos possui modelagem como descrita a seguir.

Implemente o sistema e entregue tamb√©m o diagrama de classes do sistema.

Classe Abstrata Poligono¬∂
Representa um pol√≠gono qualquer.

Atributos:

centro: tupla de 2 n√∫meros reais contendo as coordenadas do centro do pol√≠gono
lados: tupla de tamanho  ùëõ‚â•3  contendo os tamanhos dos lados de um pol√≠gono
num_lados: deve fornecer o n√∫mero de lados do pol√≠gono a partir do tamanho da tupla lados
M√©todos:

distancia: m√©todo de classe que retorna a dist√¢ncia entre dois pol√≠gonos passados por par√¢metro. Sendo  ùëÉ1  e  ùëÉ2  dois pol√≠gonos, a dist√¢ncia entre eles √© dada por  ùëë(ùëÉ1,ùëÉ2)=(ùë•ùëê1‚àíùë•ùëê2)2+(ùë¶ùëê1‚àíùë¶ùëê2)2‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚àö , onde  ùë•ùëêùëñ  e  ùë¶ùëêùëñ  s√£o as coordenadas do centro do pol√≠gono  ùëÉùëñ .
perimetro: m√©todo abstrato que calcula o per√≠metro de um pol√≠gono. Deve ter implementa√ß√£o dada pelo somat√≥rio de todos os lados.
area: m√©todo abstrato que calcula a √°rea de um pol√≠gono (sem implementa√ß√£o)
__repr__: m√©todo abstrato para retornar uma string representando o pol√≠gono (sem implementa√ß√£o)
eh_regular: m√©todo que retorna verdadeiro se o pol√≠gono possuir todos os seus lados iguais (pol√≠gono regular) ou falso caso contr√°rio
__init__: deve receber como par√¢metros as tuplas informando o centro do pol√≠gono e os tamanhos dos seus lados
Classe PoligonoRegular
Representa um pol√≠gono regular. Herda diretamente da classe base abstrata Poligono.

M√©todos:

Reimplementa√ß√£o de perimetro: deve retornar este valor como sendo o produto entre qualquer dos seus lados e o seu n√∫mero de lados
Implementa√ß√£o de __repr__: deve retornar a string "Poligono regular de n lados, lado igual a s"
Implementa√ß√£o de area: um pol√≠gono regular tem sua √°rea dada por  ùë†2ùëõ4tan(ùúãùëõ) , onde  ùë†  √© o tamanho do seu lado,  ùëõ  √© o seu n√∫mero de lados e o √¢ngulo  ùúãùëõ  est√° em radianos. Utilize a fun√ß√£o math.tan que recebe um √¢ngulo em radianos e a constante math.pi.
__init__: deve checar se o pol√≠gono √© regular e caso n√£o seja, deve imprimir uma mensagem de erro
Classe TrianguloEquilatero
Representa um tri√¢ngulo com tr√™s lados iguais. Herda diretamente da classe PoligonoRegular.

M√©todos:

Implementa√ß√£o de __repr__: deve retornar a string "Triangulo equilatero com lado igual a s"
__init__: ao inv√©s da tupla com os valores dos lados, recebe como par√¢metro um n√∫mero real com o valor do lado do tri√¢ngulo equil√°tero.
Classe Quadrado
Representa um quadrado. Herda diretamente da classe PoligonoRegular.

M√©todos:

Implementa√ß√£o de __repr__: deve retornar a string "Quadrado com lado igual a s"
__init__: ao inv√©s da tupla com os valores dos lados, recebe como par√¢metro um n√∫mero real com o valor do lado do quadrado.


Sa√≠da esperada:

Triangulo equilatero com lado igual a 2
    >Perimetro: 6
    >Area: 1.7320508075688779
Triangulo equilatero com lado igual a 3
    >Perimetro: 9
    >Area: 3.8971143170299753
Quadrado com lado igual a 4
    >Perimetro: 16
    >Area: 16.000000000000004
Poligono regular de 5 lados, lado igual a 7
    >Perimetro: 35
    >Area: 84.30339262885938
Distancia entre o quadrado e o pentagono: 28.284271247461902
Lados informados nao formam um poligono regular
'''

from abc import ABC, abstractmethod
from math import dist, tan, pi

class Poligono(ABC):
    '''
    Representa um pol√≠gono qualquer.
    '''

    def __init__(self, centro, lados):
        '''
        Par√¢metros
        ----------
        centro : tupla
        Informacao do centro do poligono
        lados : tupla
        Tamanho dos lados do poligono
        num_lados : int
        Fornece o numero de lados a partir do tamanho da tupla lados 

        Retorno
        -------
        Poligono
        Poligono inicializado.
        '''

        self.centro = (centro)
        self.lados = lados
        self.num_lados = len(lados)
    
    @abstractmethod
    def __repr__(self):
        '''
        Retorno
        -------
        String
        Retornar uma string representando o pol√≠gono.
        '''
        pass

    def eh_regular(self):
        '''
        Retorno
        -------
        Bool
        Retorna verdadeiro se o pol√≠gono possuir todos os seus lados iguais ou falso caso contr√°rio
        '''
        #for lado in self.lados:
        i = 0
        while i < len(self.lados)-1:
            if self.lados[i] != self.lados[i+1]:
                return False
            i += 1
        return True
    
    @abstractmethod
    def perimetro(self):
        '''    
        Retorno
        -------
        Float
        Calcula o per√≠metro de um pol√≠gono pelo somatorio de seus lados
        '''
        for lado in self.lados:
            per += lado
        return per
    
    @abstractmethod
    def area(self):
        '''
        Retorno
        -------
        Float
        Calcula a √°rea de um pol√≠gono
        '''
        pass

    def distancia(self, outro):
        '''
        Par√¢metros
        ----------
        outro: Poligono
        Poligono a ser usado para calcular a distancia de outro poligono

        Retorno
        -------
        Float
        Calcula a distancia entre dois pol√≠gonos
        '''
        return dist(self.centro, outro.centro)


class PoligonoRegular(Poligono):
    '''
    Representa um pol√≠gono regular.
    '''

    def __init__(self, centro, lados):
        '''
        Par√¢metros
        ----------
        centro : tupla
        Informacao do centro do poligono
        lados : tupla
        Tamanho dos lados do poligono
        num_lados : int
        Fornece o numero de lados a partir do tamanho da tupla lados 

        Retorno
        -------
        PoligonoRegular
        PoligonoRegular inicializado.
        '''

        super().__init__(centro, lados)

        if not self.eh_regular():
            print('Nao eh um poligono regular')
    
    def __repr__(self):
        '''
        Retorno
        -------
        String
        Retorna uma string.
        '''
        #return f'Poligono regular de {self.lados} lados, lado igual a {self.num_lados}'
        return f'Poligono regular de {self.num_lados} lados, lado igual a {self.lados[0]}'

    def perimetro(self):
        '''    
        Retorno
        -------
        Float
        Calcula o per√≠metro de um pol√≠gono regular multiplicando seu n¬∫ de lados
        pelo tamanho de um dos lados.
        '''
        return self.num_lados * self.lados[0]
    
    def area(self):
        '''
        Retorno
        -------
        Float
        Calcula a √°rea de um pol√≠gono regular por 
        (lados**2 * n¬∫ de lados) / (4 * tan(pi/n¬∫ de lados)radianos))
        '''
        return (self.lados[0] ** 2 * self.num_lados) / (4 * tan(pi / self.num_lados))


class Quadrado(PoligonoRegular):
    '''
    Representa um quadrado.
    '''

    def __init__(self, centro, lados):
        '''
        Par√¢metros
        ----------
        lados : float
        Tamanho dos lados do quadrado

        Retorno
        -------
        Quadrado
        Quadrado inicializado.
        '''

        #super().__init__(centro, lados)
        #self.lados = lados
        self.centro = (centro)
        self.lados = (lados, lados, lados, lados)
        self.num_lados = 4
    
    def __repr__(self):
        '''
        Retorno
        -------
        String
        Retorna uma string.
        '''
        return f'Quadrado com lado igual a {self.lados[0]}'


class TrianguloEquilatero(PoligonoRegular):
    '''
    Representa um tri√¢ngulo com tr√™s lados iguais.
    '''

    def __init__(self, centro, lados):
        '''
        Par√¢metros
        ----------
        lados : float
        Tamanho dos lados do triangulo equilatero.

        Retorno
        -------
        TrianguloEquilatero
        TrianguloEquilatero inicializado.
        '''

        #super().__init__(centro, lados)
        self.centro = centro
        self.lados = (lados, lados, lados)
        self.num_lados = 3
    
    def __repr__(self):
        '''
        Retorno
        -------
        String
        Retorna uma string.
        '''
        return f'Triangulo equilatero com lado igual a {self.lados[0]}'


if __name__ == "__main__":
    
    t1 = TrianguloEquilatero((5.0, 5.0), 2)
    print(t1)
    print(">Perimetro: {}".format(t1.perimetro()))
    print(">Area: {}".format(t1.area()))
    
    t2 = TrianguloEquilatero((0.0, -2.0), 3)
    print(t2)
    print(">Perimetro: {}".format(t2.perimetro()))
    print(">Area: {}".format(t2.area()))
    
    q1 = Quadrado((10.0, 10.0), 4)
    print(q1)
    print(">Perimetro: {}".format(q1.perimetro()))
    print(">Area: {}".format(q1.area()))
    
    p1 = PoligonoRegular((-10.0, -10.0), (7,7,7,7,7))
    print(p1)
    print(">Perimetro: {}".format(p1.perimetro()))
    print(">Area: {}".format(p1.area()))
    print("Distancia entre o quadrado e o pentagono: {}".format(Poligono.distancia(q1, p1)))

    perr = PoligonoRegular((5.0, 5.0), (6, 6, 6, 5, 6, 6))